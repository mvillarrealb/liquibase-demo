{
	"info": {
		"_postman_id": "69f1aa5e-2d23-49fe-9079-6a33a7b2e89c",
		"name": "books-e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authors",
			"item": [
				{
					"name": "createAuthor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must have authorId\", () => {",
									"    pm.expect(responseJson).to.have.property('authorId');",
									"    pm.expect(responseJson.authorId).to.be.a(\"number\");",
									"});",
									"",
									"pm.environment.set(\"AUTHOR_ID\", responseJson.authorId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authorName\": \"Stephen King\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/authors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "findAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has authors\", () => {",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/authors",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "findAuthorById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/authors/{{AUTHOR_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"authors",
								"{{AUTHOR_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "findAuthorByIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    min = Math.ceil(min);",
									"    max = Math.floor(max);",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"/**set an random book Id with a number that will not be found on the database */",
									"pm.environment.set(\"RANDOM_ID\",  getRandomInt(1000, 9999));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/authors/{{RANDOM_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"authors",
								"{{RANDOM_ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "createBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must have bookId\", () => {",
									"    pm.expect(responseJson).to.have.property('bookId');",
									"    pm.expect(responseJson.bookId).to.be.a(\"number\");",
									"});",
									"",
									"pm.environment.set(\"BOOK_ID\", responseJson.bookId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"authorId\": {{AUTHOR_ID}},\n    \"bookISBN\": \"1501156705\",\n    \"bookName\": \"Pet Sematary\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "findBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has authors\", () => {",
									"    pm.expect(responseJson).to.be.an(\"array\");",
									"    pm.expect(responseJson).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "findBookById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books/{{BOOK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books",
								"{{BOOK_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "findBookByIdNotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", () => {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {",
									"    min = Math.ceil(min);",
									"    max = Math.floor(max);",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"/**set an random book Id with a number that will not be found on the database */",
									"pm.environment.set(\"RANDOM_ID\",  getRandomInt(1000, 9999));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/books/{{RANDOM_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books",
								"{{RANDOM_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "attachBookCover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "./newman/StephenKingPetSematary.jpg"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books/1/cover",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books",
								"1",
								"cover"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetchBookCover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "/home/mvillarreal/Im√°genes/Captura de pantalla de 2021-06-04 14-25-25.png"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/books/1/cover",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"books",
								"1",
								"cover"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:8080"
		},
		{
			"key": "AUTHOR_ID",
			"value": ""
		}
	]
}